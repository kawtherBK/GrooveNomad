import fs from "fs"

console.log("üîç DIAGNOSTIC CSS - GrooveNomad")
console.log("================================\n")

// 1. V√©rifier les fichiers essentiels
const essentialFiles = [
  "tailwind.config.ts",
  "postcss.config.mjs",
  "app/globals.css",
  "package.json",
  "next.config.mjs",
]

console.log("üìÅ V√©rification des fichiers essentiels:")
essentialFiles.forEach((file) => {
  const exists = fs.existsSync(file)
  console.log(`${exists ? "‚úÖ" : "‚ùå"} ${file}`)

  if (!exists) {
    console.log(`   ‚ö†Ô∏è  Fichier manquant: ${file}`)
  }
})

// 2. V√©rifier le contenu de globals.css
console.log("\nüé® V√©rification de app/globals.css:")
if (fs.existsSync("app/globals.css")) {
  const cssContent = fs.readFileSync("app/globals.css", "utf8")
  const hasTailwindBase = cssContent.includes("@tailwind base")
  const hasTailwindComponents = cssContent.includes("@tailwind components")
  const hasTailwindUtilities = cssContent.includes("@tailwind utilities")

  console.log(`${hasTailwindBase ? "‚úÖ" : "‚ùå"} @tailwind base`)
  console.log(`${hasTailwindComponents ? "‚úÖ" : "‚ùå"} @tailwind components`)
  console.log(`${hasTailwindUtilities ? "‚úÖ" : "‚ùå"} @tailwind utilities`)
} else {
  console.log("‚ùå app/globals.css introuvable")
}

// 3. V√©rifier package.json
console.log("\nüì¶ V√©rification des d√©pendances:")
if (fs.existsSync("package.json")) {
  const packageJson = JSON.parse(fs.readFileSync("package.json", "utf8"))
  const requiredDeps = ["tailwindcss", "postcss", "autoprefixer", "tailwindcss-animate"]

  requiredDeps.forEach((dep) => {
    const hasInDeps = packageJson.dependencies?.[dep]
    const hasInDevDeps = packageJson.devDependencies?.[dep]
    const exists = hasInDeps || hasInDevDeps
    console.log(`${exists ? "‚úÖ" : "‚ùå"} ${dep}`)
  })
}

// 4. V√©rifier la configuration Tailwind
console.log("\n‚öôÔ∏è  V√©rification de tailwind.config.ts:")
if (fs.existsSync("tailwind.config.ts")) {
  const tailwindConfig = fs.readFileSync("tailwind.config.ts", "utf8")
  const hasContent = tailwindConfig.includes("content:")
  const hasAppPath = tailwindConfig.includes("./app/**/*.{ts,tsx}")
  const hasComponentsPath = tailwindConfig.includes("./components/**/*.{ts,tsx}")

  console.log(`${hasContent ? "‚úÖ" : "‚ùå"} Configuration content`)
  console.log(`${hasAppPath ? "‚úÖ" : "‚ùå"} Chemin ./app/**/*.{ts,tsx}`)
  console.log(`${hasComponentsPath ? "‚úÖ" : "‚ùå"} Chemin ./components/**/*.{ts,tsx}`)
}

console.log("\nüöÄ SOLUTIONS RECOMMAND√âES:")
console.log("1. Ex√©cuter: npm install")
console.log("2. Red√©marrer le serveur: npm run dev")
console.log("3. Vider le cache: rm -rf .next")
console.log("4. Si probl√®me persiste, utiliser le script de r√©paration")
